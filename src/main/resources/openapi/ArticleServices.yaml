openapi: 3.0.1
info:
  title: Article Management Integration API
  description: APIs for integration with Article Management
  version: 0.1.5
servers:
  - url: 'https://{baseURL}:{port}/api/{version}'
    description: Service URL
    variables:
      baseURL:
        enum:
          - article-mgmt.doms.com
        default: article-mgmt.doms.com
      port:
        default: "8080"
      version:
        default: v1
tags:
  - name: Articles
    description: Articles API


paths:

  /articles:
    get:
      tags:
        - Articles
      summary: Gets the articles
      description: Returns article
      operationId: getArticles
      responses:
        200:
          description: Successful return of the article
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleResponse'
        404:
          description: No data found

  /articles/getArticleById/{articleId}:
    get:
      operationId: getArticleById
      parameters:
        - name: articleId
          in: path
          description: The identifier of the article
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successful return of the article
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleResponse'
        404:
          description: No data found

  /articles/getArticlesByUserId/{userId}:
    get:
      operationId: getArticlesByUserId
      parameters:
        - name: userId
          in: path
          description: The identifier of the user
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successful return of all the articles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ArticleResponse'
        404:
          description: No data found

  /articles/addArticle:
    post:
      operationId: addArticle
      parameters:
        - name: article
          in: query
          description: The article to be saved
          required: true
          schema:
            $ref: '#/components/schemas/Article'
      responses:
        201:
          description: Successfuly saved article
        403:
          description: Forbidden
        409:
          description: Conflict. Article already exists

  /articles/deleteArticle/{articleId}/{userId}:
    get:
      operationId: deleteArticle
      parameters:
        - name: userId
          in: path
          description: The identifier of the user
          required: true
          schema:
            type: integer
        - name: articleId
          in: path
          description: The identifier of the article
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successful deletion of the article
        404:
          description: No data found
        403:
          description: Forbidden

  /articles/updateArticle:
    put:
      operationId: updateArticle
      parameters:
        - name: article
          in: query
          description: The article to be updated
          required: true
          schema:
            $ref: '#/components/schemas/Article'
      responses:
        201:
          description: Successfully updated
        403:
          description: Forbidden
        409:
          description: Conflict. Article already exists

components:
  schemas:
    ArticleResponse:
      description: Article Response
      type: object
      properties:
        id:
          type: integer
          description: article identifier
        userId:
          type: integer
          description: user identifier
        title:
          type: string
          description: title of the article
        body:
          type: string
          description: body  of the article
      required:
        - id
        - userId

    Article:
      description: Article
      type: object
      properties:
        id:
          type: integer
          description: article identifier
        userId:
          type: integer
          description: user identifier
        title:
          type: string
          description: title of the article
        body:
          type: string
          description: body  of the article
      required:
        - id
        - userId
        - body
        - title
